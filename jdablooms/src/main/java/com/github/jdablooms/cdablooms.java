/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.github.jdablooms;

public class cdablooms {
  public static void MurmurHash3_x64_128(SWIGTYPE_p_void key, int len, long seed, SWIGTYPE_p_void out) {
    cdabloomsJNI.MurmurHash3_x64_128(SWIGTYPE_p_void.getCPtr(key), len, seed, SWIGTYPE_p_void.getCPtr(out));
  }

  public static String dablooms_version() {
    return cdabloomsJNI.dablooms_version();
  }

  public static bitmap_t bitmap_resize(bitmap_t bitmap, long old_size, long new_size) {
    long cPtr = cdabloomsJNI.bitmap_resize(bitmap_t.getCPtr(bitmap), bitmap, old_size, new_size);
    return (cPtr == 0) ? null : new bitmap_t(cPtr, false);
  }

  public static bitmap_t new_bitmap(int fd, long bytes) {
    long cPtr = cdabloomsJNI.new_bitmap(fd, bytes);
    return (cPtr == 0) ? null : new bitmap_t(cPtr, false);
  }

  public static int bitmap_increment(bitmap_t bitmap, long index, int offset) {
    return cdabloomsJNI.bitmap_increment(bitmap_t.getCPtr(bitmap), bitmap, index, offset);
  }

  public static int bitmap_decrement(bitmap_t bitmap, long index, int offset) {
    return cdabloomsJNI.bitmap_decrement(bitmap_t.getCPtr(bitmap), bitmap, index, offset);
  }

  public static int bitmap_check(bitmap_t bitmap, long index, int offset) {
    return cdabloomsJNI.bitmap_check(bitmap_t.getCPtr(bitmap), bitmap, index, offset);
  }

  public static int bitmap_flush(bitmap_t bitmap) {
    return cdabloomsJNI.bitmap_flush(bitmap_t.getCPtr(bitmap), bitmap);
  }

  public static void free_bitmap(bitmap_t bitmap) {
    cdabloomsJNI.free_bitmap(bitmap_t.getCPtr(bitmap), bitmap);
  }

  public static int free_counting_bloom(counting_bloom_t bloom) {
    return cdabloomsJNI.free_counting_bloom(counting_bloom_t.getCPtr(bloom), bloom);
  }

  public static counting_bloom_t new_counting_bloom(long capacity, double error_rate, String filename) {
    long cPtr = cdabloomsJNI.new_counting_bloom(capacity, error_rate, filename);
    return (cPtr == 0) ? null : new counting_bloom_t(cPtr, false);
  }

  public static counting_bloom_t new_counting_bloom_from_file(long capacity, double error_rate, String filename) {
    long cPtr = cdabloomsJNI.new_counting_bloom_from_file(capacity, error_rate, filename);
    return (cPtr == 0) ? null : new counting_bloom_t(cPtr, false);
  }

  public static int counting_bloom_add(counting_bloom_t bloom, String s, long len) {
    return cdabloomsJNI.counting_bloom_add(counting_bloom_t.getCPtr(bloom), bloom, s, len);
  }

  public static int counting_bloom_remove(counting_bloom_t bloom, String s, long len) {
    return cdabloomsJNI.counting_bloom_remove(counting_bloom_t.getCPtr(bloom), bloom, s, len);
  }

  public static int counting_bloom_check(counting_bloom_t bloom, String s, long len) {
    return cdabloomsJNI.counting_bloom_check(counting_bloom_t.getCPtr(bloom), bloom, s, len);
  }

  public static scaling_bloom_t new_scaling_bloom(long capacity, double error_rate, String filename) {
    long cPtr = cdabloomsJNI.new_scaling_bloom(capacity, error_rate, filename);
    return (cPtr == 0) ? null : new scaling_bloom_t(cPtr, false);
  }

  public static scaling_bloom_t new_scaling_bloom_from_file(long capacity, double error_rate, String filename) {
    long cPtr = cdabloomsJNI.new_scaling_bloom_from_file(capacity, error_rate, filename);
    return (cPtr == 0) ? null : new scaling_bloom_t(cPtr, false);
  }

  public static int free_scaling_bloom(scaling_bloom_t bloom) {
    return cdabloomsJNI.free_scaling_bloom(scaling_bloom_t.getCPtr(bloom), bloom);
  }

  public static int scaling_bloom_count(scaling_bloom_t bloom) {
    return cdabloomsJNI.scaling_bloom_count(scaling_bloom_t.getCPtr(bloom), bloom);
  }

  public static int scaling_bloom_add(scaling_bloom_t bloom, String s, long len, long id) {
    return cdabloomsJNI.scaling_bloom_add(scaling_bloom_t.getCPtr(bloom), bloom, s, len, id);
  }

  public static int scaling_bloom_remove(scaling_bloom_t bloom, String s, long len, long id) {
    return cdabloomsJNI.scaling_bloom_remove(scaling_bloom_t.getCPtr(bloom), bloom, s, len, id);
  }

  public static int scaling_bloom_check(scaling_bloom_t bloom, String s, long len) {
    return cdabloomsJNI.scaling_bloom_check(scaling_bloom_t.getCPtr(bloom), bloom, s, len);
  }

  public static int scaling_bloom_add_bytes(scaling_bloom_t bloom, byte[] a, long id) {
    return cdabloomsJNI.scaling_bloom_add_bytes(scaling_bloom_t.getCPtr(bloom), bloom, a, id);
  }

  public static int scaling_bloom_remove_bytes(scaling_bloom_t bloom, byte[] a, long id) {
    return cdabloomsJNI.scaling_bloom_remove_bytes(scaling_bloom_t.getCPtr(bloom), bloom, a, id);
  }

  public static int scaling_bloom_check_bytes(scaling_bloom_t bloom, byte[] a) {
    return cdabloomsJNI.scaling_bloom_check_bytes(scaling_bloom_t.getCPtr(bloom), bloom, a);
  }

  public static int scaling_bloom_flush(scaling_bloom_t bloom) {
    return cdabloomsJNI.scaling_bloom_flush(scaling_bloom_t.getCPtr(bloom), bloom);
  }

  public static long scaling_bloom_mem_seqnum(scaling_bloom_t bloom) {
    return cdabloomsJNI.scaling_bloom_mem_seqnum(scaling_bloom_t.getCPtr(bloom), bloom);
  }

  public static long scaling_bloom_disk_seqnum(scaling_bloom_t bloom) {
    return cdabloomsJNI.scaling_bloom_disk_seqnum(scaling_bloom_t.getCPtr(bloom), bloom);
  }

}
